name: Release Process

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      branch:
        description: 'Branch to release from (defaults to main)'
        required: false
        default: 'main'
        type: string
      is_hotfix:
        description: 'Is this a hotfix release?'
        required: false
        default: false
        type: boolean
      deploy_staging:
        description: 'Deploy to staging'
        type: boolean
        default: true
        required: false
      deploy_production:
        description: 'Deploy to production'
        type: boolean
        default: true
        required: false

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version_tag: v${{ github.event.inputs.version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Validate version format
        run: |
          if ! [[ ${{ github.event.inputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Must be in format X.Y.Z"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Update version in package.json
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ github.event.inputs.version }}"
          git push origin HEAD:${{ github.event.inputs.branch }}

      - name: Create and push tag
        run: |
          git tag -a v${{ github.event.inputs.version }} -m "Release v${{ github.event.inputs.version }}"
          git push origin v${{ github.event.inputs.version }}

  create-release:
    needs: prepare-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag exists, use the first commit
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          # Generate changelog
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "## Changes in this release" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          git log --pretty=format:"* %s (%h)" $PREV_TAG..HEAD >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.version_tag }}
          name: Release ${{ needs.prepare-release.outputs.version_tag }}
          body: ${{ env.CHANGELOG }}
          draft: false
          prerelease: ${{ github.event.inputs.is_hotfix }}

  trigger-deployment:
    needs: [prepare-release, create-release]
    uses: ./.github/workflows/deploy.yml
    with:
      version: ${{ needs.prepare-release.outputs.version_tag }}
      deploy_staging: ${{ github.event.inputs.deploy_staging }}
      deploy_production: ${{ github.event.inputs.deploy_production }}
    secrets: inherit 