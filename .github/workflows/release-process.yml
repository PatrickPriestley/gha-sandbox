# release.yml
name: Release Process
run-name: Create ${{ inputs.is_hotfix && 'hotfix' || 'release' }} ${{ inputs.release_type }}

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type for automatic versioning'
        type: choice
        required: true
        default: 'patch'
        options:
          - patch
          - minor
          - major
      is_hotfix:
        description: 'Create a hotfix from the latest release'
        required: false
        default: false
        type: boolean
      environments:
        description: 'Target environments'
        type: choice
        options:
          - staging2
          - production
          - both
          - none
        default: 'staging2'
        required: true

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      base_version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Find latest release version
        id: set-version
        if: inputs.is_hotfix
        run: |
          # Get latest non-hotfix tag (assuming hotfix tags contain 'hotfix')
          VERSION=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | grep -v 'hotfix' | head -1)
          
          if [ -z "$VERSION" ]; then
            echo "::error::No release tags found"
            exit 1
          fi
          
          echo "Using latest release: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  determine-version:
    needs: validate-inputs
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Bump version and create tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: ${{ inputs.release_type }}
          dry_run: true
          
      - name: Display determined version
        run: |
          echo "Automatically determined version: ${{ steps.tag_version.outputs.new_tag }}"

  prepare-release:
    needs: [validate-inputs, determine-version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version_tag: ${{ needs.determine-version.outputs.version_tag }}
      branch_name: ${{ steps.set_branch.outputs.branch_name }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.is_hotfix && needs.validate-inputs.outputs.base_version || 'main' }}
          fetch-depth: 0
      
      - name: Set branch name
        id: set_branch
        run: |
          if [ "${{ inputs.is_hotfix }}" = "true" ]; then
            BRANCH_NAME="hotfix/${{ needs.determine-version.outputs.version_tag }}"
            echo "Creating hotfix branch $BRANCH_NAME from ${{ needs.validate-inputs.outputs.base_version }}"
          else
            BRANCH_NAME="main"
            echo "Using main branch for release"
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
      
      - name: Create hotfix branch if needed
        if: inputs.is_hotfix
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin "https://${GITHUB_ACTOR}:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git checkout ${{ needs.validate-inputs.outputs.base_version }}
          git checkout -b ${{ steps.set_branch.outputs.branch_name }}
          git push -u origin ${{ steps.set_branch.outputs.branch_name }}
          echo "Created and pushed hotfix branch ${{ steps.set_branch.outputs.branch_name }}"
          echo "Developers should now make changes on this branch and create a PR"
          echo "After PR approval, continue the release process by tagging this branch"
      
      - name: Create tag and release (for non-hotfixes)
        if: ${{ !inputs.is_hotfix }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.determine-version.outputs.version_tag }}
          name: Release ${{ needs.determine-version.outputs.version_tag }}
          commit: main
          generateReleaseNotes: true
          makeLatest: "legacy"
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: "false"
          draft: "false"
          prerelease: "false"

  notify-hotfix-created:
    needs: [determine-version, prepare-release]
    if: inputs.is_hotfix
    runs-on: ubuntu-latest
    
    steps:
      - name: Send notification
        run: |
          echo "SIMULATED: Would send Slack notification about hotfix branch creation"
          echo "Branch: ${{ needs.prepare-release.outputs.branch_name }}"
          echo "Base version: ${{ needs.validate-inputs.outputs.base_version }}"
          echo "Target version: ${{ needs.determine-version.outputs.version_tag }}"

  deploy-staging2:
    needs: [determine-version, prepare-release]
    if: ${{ !inputs.is_hotfix && (inputs.environments == 'staging2' || inputs.environments == 'both') }}
    runs-on: ubuntu-latest
    environment: staging2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-version.outputs.version_tag }}
          fetch-depth: 0
      
      - name: Deploy to staging2
        run: |
          echo "SIMULATED: Would deploy ${{ needs.determine-version.outputs.version_tag }} to staging2"
          # Real deployment steps would go here
          
      - name: Run tests
        run: |
          echo "SIMULATED: Would run tests in staging2"

  deploy-production:
    needs: [determine-version, prepare-release, deploy-staging2]
    if: ${{ !inputs.is_hotfix && (inputs.environments == 'production' || inputs.environments == 'both') }}
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-version.outputs.version_tag }}
          fetch-depth: 0
      
      - name: Deploy to production
        run: |
          echo "SIMULATED: Would deploy ${{ needs.determine-version.outputs.version_tag }} to production"
          # Real deployment steps would go here