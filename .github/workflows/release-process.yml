# release.yml
name: Release Process
run-name: Create and deploy ${{ inputs.is_hotfix && 'hotfix' || 'release' }} v${{ inputs.version }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      branch:
        description: 'Branch to release from (defaults to main)'
        required: false
        default: 'main'
        type: string
      is_hotfix:
        description: 'Is this a hotfix release?'
        required: false
        default: false
        type: boolean
      base_version:
        description: 'Base version for hotfix (e.g., v1.0.0, required for hotfixes)'
        required: false
        type: string
      deploy_staging2:
        description: 'Deploy to staging2'
        type: boolean
        default: true
        required: false
      deploy_production:
        description: 'Deploy to production'
        type: boolean
        default: false
        required: false
      destructive_changes:
        description: 'Run destructive changes'
        type: boolean
        default: false
        required: false

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate version format
        run: |
          if ! [[ ${{ inputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format. Must be in format X.Y.Z"
            exit 1
          fi
      
      - name: Validate hotfix inputs
        if: inputs.is_hotfix
        run: |
          if [ -z "${{ inputs.base_version }}" ]; then
            echo "::error::Base version is required for hotfixes"
            exit 1
          fi
          
          if ! [[ ${{ inputs.base_version }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid base version format. Must be in format vX.Y.Z"
            exit 1
          fi

  prepare-release:
    needs: validate-inputs
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version_tag: v${{ inputs.version }}
      branch_name: ${{ steps.set_branch.outputs.branch_name }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.is_hotfix && inputs.base_version || inputs.branch }}
          fetch-depth: 0
      
      - name: Set branch name
        id: set_branch
        run: |
          if [ "${{ inputs.is_hotfix }}" = "true" ]; then
            BRANCH_NAME="hotfix/v${{ inputs.version }}"
            echo "Creating hotfix branch $BRANCH_NAME from ${{ inputs.base_version }}"
          else
            BRANCH_NAME="${{ inputs.branch }}"
            echo "Using existing branch $BRANCH_NAME"
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
      
      - name: Create hotfix branch if needed
        if: inputs.is_hotfix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git checkout ${{ inputs.base_version }}
          git checkout -b ${{ steps.set_branch.outputs.branch_name }}
          git push -u origin ${{ steps.set_branch.outputs.branch_name }}
          echo "Created and pushed hotfix branch ${{ steps.set_branch.outputs.branch_name }}"
          echo "Developers should now make changes on this branch and create a PR"
          echo "After PR approval, continue the release process by tagging this branch"
      
      - name: Create tag directly (for non-hotfixes)
        if: ${{ !inputs.is_hotfix }}
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ inputs.version }}
          name: Release v${{ inputs.version }}
          commit: ${{ inputs.branch }}
          generateReleaseNotes: true
          makeLatest: true
          token: ${{ secrets.GITHUB_TOKEN }}

  notify-hotfix-created:
    needs: prepare-release
    if: inputs.is_hotfix
    runs-on: ubuntu-latest
    
    steps:
      - name: Send notification
        run: |
          echo "SIMULATED: Would send Slack notification about hotfix branch creation"
          echo "Branch: ${{ needs.prepare-release.outputs.branch_name }}"
          echo "Base version: ${{ inputs.base_version }}"
          echo "Target version: v${{ inputs.version }}"
          
          # COMMENTED OUT FOR TESTING
          # uses: slackapi/slack-github-action@v1.24.0
          # with:
          #   payload: |
          #     {
          #       "text": "Hotfix branch created",
          #       "blocks": [
          #         {
          #           "type": "section",
          #           "text": {
          #             "type": "mrkdwn",
          #             "text": "*Hotfix branch created*\nBranch: `${{ needs.prepare-release.outputs.branch_name }}`\nBase version: `${{ inputs.base_version }}`\nTarget version: `v${{ inputs.version }}`"
          #           }
          #         },
          #         {
          #           "type": "section",
          #           "text": {
          #             "type": "mrkdwn",
          #             "text": "1. Make your changes in this branch\n2. Create a PR for review\n3. After approval, tag the branch with `v${{ inputs.version }}`\n4. Deploy using the 'Tag and Deploy Hotfix' workflow"
          #           }
          #         }
          #       ]
          #     }
          # env:
          #   SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  trigger-deployment:
    needs: prepare-release
    if: ${{ !inputs.is_hotfix }}
    uses: ./.github/workflows/deploy-salesforce.yml
    with:
      version_tag: v${{ inputs.version }}
      deploy_staging2: ${{ github.event.inputs.deploy_staging2 }}
      deploy_production: ${{ github.event.inputs.deploy_production }}
      destructive_changes: ${{ github.event.inputs.destructive_changes }}
    secrets: inherit