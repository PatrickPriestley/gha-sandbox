# deploy-salesforce.yml
name: Deploy Salesforce
run-name: Deploy ${{ inputs.version_tag }} to ${{ inputs.environments }}

on:
  workflow_call:
    inputs:
      version_tag:
        description: "Tag version to deploy (e.g., v1.0.0)"
        type: string
        required: true
      environments:
        description: "Target environments"
        type: string
        default: 'staging2'
        required: true
      destructive_changes:
        description: "Run destructive changes"
        type: string
        default: 'false'
        required: false
  
  workflow_dispatch:
    inputs:
      version_tag:
        description: "Tag version to deploy (e.g., v1.0.0)"
        type: string
        required: true
      environments:
        description: "Target environments"
        type: choice
        options:
          - staging2
          - production
          - both
        default: 'staging2'
        required: true
      destructive_changes:
        description: "Run destructive changes"
        type: boolean
        default: false
        required: false

jobs:
  determine-environments:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          ENVIRONMENTS=()
          
          # Handle both direct Boolean and string 'true'/'false' inputs
          if [[ "${{ inputs.environments }}" == "staging2" || "${{ inputs.environments }}" == "both" ]]; then
            ENVIRONMENTS+=("staging2")
          fi
          
          if [[ "${{ inputs.environments }}" == "production" || "${{ inputs.environments }}" == "both" ]]; then
            ENVIRONMENTS+=("production")
          fi
          
          # Convert to JSON array for matrix
          JSON_ARRAY=$(echo "${ENVIRONMENTS[@]}" | jq -R -s -c 'split(" ")')
          echo "matrix=$JSON_ARRAY" >> $GITHUB_OUTPUT

  deploy:
    needs: determine-environments
    if: ${{ needs.determine-environments.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(needs.determine-environments.outputs.matrix) }}
      fail-fast: false
      max-parallel: 1  # Ensure staging deploys before production
    
    environment: ${{ matrix.environment }}
    name: Deploy to ${{ matrix.environment }}
    
    steps:
      - name: Install Salesforce CLI
        run: |
          echo "SIMULATED: Would install Salesforce CLI"
          # npm install @salesforce/cli --global

      - name: Install plugins
        run: |
          echo "SIMULATED: Would install sfdx-git-delta plugin"
          # echo y | sf plugins:install sfdx-git-delta

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version_tag }}
          fetch-depth: 0
          fetch-tags: true

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (apt update && apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            || echo "Failed to download GitHub CLI keyring"
          chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
            | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          apt update
          apt install gh -y

      - name: Determine base for delta calculation
        id: determine_base
        run: |
          VERSION_TAG="${{ inputs.version_tag }}"
          
          # Check if this is a version tag with semantic versioning
          if [[ $VERSION_TAG =~ v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            
            if [ "$PATCH" -gt "0" ]; then
              # This is a hotfix - compare against the base version
              BASE_VERSION="v${MAJOR}.${MINOR}.0"
              echo "This is a hotfix ($VERSION_TAG). Using base version $BASE_VERSION for comparison"
              
              if git rev-parse --verify $BASE_VERSION >/dev/null 2>&1; then
                echo "base_sha=$(git rev-list -n 1 $BASE_VERSION)" >> $GITHUB_OUTPUT
                echo "compare_to=$BASE_VERSION" >> $GITHUB_OUTPUT
              else
                echo "Base version $BASE_VERSION not found. Falling back to environment tracking."
                # Try to get environment variable
                VAR_NAME="LAST_DEPLOYED_SHA_${{ matrix.environment }}"
                LAST_SHA=$(gh variable get $VAR_NAME --env ${{ matrix.environment }} 2>/dev/null || echo "")
                
                if [ -n "$LAST_SHA" ]; then
                  echo "Using last deployed SHA from environment variable"
                  echo "base_sha=$LAST_SHA" >> $GITHUB_OUTPUT
                  echo "compare_to=Last deployed SHA" >> $GITHUB_OUTPUT
                else
                  echo "No environment variable found. Using fallback tag detection."
                  # Find the most recent tag as fallback
                  LAST_TAG=$(git describe --tags --abbrev=0 --exclude=$VERSION_TAG)
                  echo "Using last tag $LAST_TAG as fallback"
                  echo "base_sha=$(git rev-list -n 1 $LAST_TAG)" >> $GITHUB_OUTPUT
                  echo "compare_to=$LAST_TAG" >> $GITHUB_OUTPUT
                fi
              fi
            else
              # This is a regular release - find previous regular release
              echo "This is a regular release. Finding previous regular release..."
              
              # Get all x.y.0 tags (regular releases), sorted by version
              MAJOR_TAGS=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.0$')
              
              # Find the previous regular release tag
              FOUND_CURRENT=false
              PREVIOUS_TAG=""
              for tag in $MAJOR_TAGS; do
                if $FOUND_CURRENT; then
                  PREVIOUS_TAG=$tag
                  break
                fi
                if [ "$tag" = "$VERSION_TAG" ]; then
                  FOUND_CURRENT=true
                fi
              done
              
              if [ -n "$PREVIOUS_TAG" ]; then
                echo "Using previous regular release $PREVIOUS_TAG as base for comparison"
                echo "base_sha=$(git rev-list -n 1 $PREVIOUS_TAG)" >> $GITHUB_OUTPUT
                echo "compare_to=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
              else
                echo "No previous regular release found, using last deployed SHA"
                # Try to get environment variable
                VAR_NAME="LAST_DEPLOYED_SHA_${{ matrix.environment }}"
                LAST_SHA=$(gh variable get $VAR_NAME --env ${{ matrix.environment }} 2>/dev/null || echo "")
                
                if [ -n "$LAST_SHA" ]; then
                  echo "Using last deployed SHA from environment variable"
                  echo "base_sha=$LAST_SHA" >> $GITHUB_OUTPUT
                  echo "compare_to=Last deployed SHA" >> $GITHUB_OUTPUT
                else
                  echo "No environment variable found. Using initial commit."
                  FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
                  echo "Using initial commit as base"
                  echo "base_sha=$FIRST_COMMIT" >> $GITHUB_OUTPUT
                  echo "compare_to=Initial commit" >> $GITHUB_OUTPUT
                fi
              fi
            fi
          else
            # Not a version tag - use environment variable if available
            echo "Not a semantic version tag. Checking environment variable."
            
            VAR_NAME="LAST_DEPLOYED_SHA_${{ matrix.environment }}"
            LAST_SHA=$(gh variable get $VAR_NAME --env ${{ matrix.environment }} 2>/dev/null || echo "")
            
            if [ -n "$LAST_SHA" ]; then
              echo "Using last deployed SHA from environment variable"
              echo "base_sha=$LAST_SHA" >> $GITHUB_OUTPUT
              echo "compare_to=Last deployed SHA" >> $GITHUB_OUTPUT
            else
              echo "No environment variable found. Using last tag."
              LAST_TAG=$(git describe --tags --abbrev=0 --exclude=$VERSION_TAG)
              echo "Using last tag $LAST_TAG as fallback"
              echo "base_sha=$(git rev-list -n 1 $LAST_TAG)" >> $GITHUB_OUTPUT
              echo "compare_to=$LAST_TAG" >> $GITHUB_OUTPUT
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create JWT Key file
        run: |
          echo "SIMULATED: Would create JWT key file"
          # echo "${{ secrets.SF_JWT_KEY }}" > gha-server.key

      - name: Authorize Org - ${{ matrix.environment }}
        env:
          CLIENT_ID: ${{ vars.SF_CLIENTID }}
          USERNAME: ${{ vars.SF_USERNAME }}
          INSTANCE_ALIAS: ${{ vars.SF_INSTANCEURL }}
        run: |
          echo "SIMULATED: Would authorize ${{ matrix.environment }} org"
          # sf org login jwt --client-id $CLIENT_ID --jwt-key-file gha-server.key --username $USERNAME --alias $INSTANCE_ALIAS

      - name: Calculate and deploy delta
        id: deploy
        env:
          USERNAME: ${{ vars.SF_USERNAME }}
        run: |
          echo "Calculating delta from ${{ steps.determine_base.outputs.compare_to }} to ${{ inputs.version_tag }}"
          
          # COMMENTED OUT FOR TESTING: Calculate delta
          # sf sgd:source:delta --to "HEAD" --from "${{ steps.determine_base.outputs.base_sha }}" -o "." -i .forceignore
          
          # FOR TESTING: Create mock package file to simulate a deploy
          mkdir -p package
          echo '<?xml version="1.0" encoding="UTF-8"?><Package xmlns="http://soap.sforce.com/2006/04/metadata"><version>58.0</version></Package>' > package/package.xml
          
          echo "SIMULATED DEPLOYMENT: Would deploy to ${{ matrix.environment }}"
          echo "Base SHA: ${{ steps.determine_base.outputs.base_sha }}"
          echo "Compare to: ${{ steps.determine_base.outputs.compare_to }}"
          
          # Handle destructive changes parameter conversion
          DESTRUCTIVE_CHANGES="false"
          if [[ "${{ inputs.destructive_changes }}" == "true" || "${{ inputs.destructive_changes }}" == true ]]; then
            DESTRUCTIVE_CHANGES="true"
          fi
          
          echo "Destructive changes: $DESTRUCTIVE_CHANGES"
          
          # Simulate a successful deployment
          exit 0

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: delta-package-${{ matrix.environment }}
          path: |
            package/package.xml
            destructiveChanges/destructiveChanges.xml

      - name: Update last deployed SHA
        if: success() && (matrix.environment != 'production' || (matrix.environment == 'production' && steps.deploy.outcome == 'success'))
        run: |
          # Store the current SHA as the last deployed SHA for this environment
          CURRENT_SHA=$(git rev-parse HEAD)
          VAR_NAME="LAST_DEPLOYED_SHA_${{ matrix.environment }}"
          
          # Update the environment variable with the new SHA
          gh variable set $VAR_NAME --env ${{ matrix.environment }} --body "$CURRENT_SHA"
          echo "Updated $VAR_NAME to $CURRENT_SHA for environment ${{ matrix.environment }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify deployment status
        if: always()
        run: |
          echo "SIMULATED: Would send Slack notification for ${{ inputs.version_tag }} deployment to ${{ matrix.environment }}"
          echo "Status: ${{ job.status }}"
          echo "Compared against: ${{ steps.determine_base.outputs.compare_to }}"

  run-e2e-tests:
    needs: deploy
    if: success() && contains(fromJson(needs.determine-environments.outputs.matrix), 'staging2')
    runs-on: ubuntu-latest
    environment: e2e-staging2
    name: Run E2E Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version_tag }}
      
      - name: Run E2E tests
        run: |
          echo "SIMULATED: Would run E2E tests against staging2"

      - name: Notify test results
        if: always()
        run: |
          echo "SIMULATED: Would send Slack notification for E2E test results"
          echo "Version: ${{ inputs.version_tag }}"
          echo "Status: ${{ job.status }}"