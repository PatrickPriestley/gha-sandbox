# tag-deploy-hotfix.yml
name: Tag and Deploy Hotfix
run-name: Tag and deploy hotfix ${{ inputs.version || 'auto' }} from ${{ inputs.hotfix_branch }}

on:
  workflow_dispatch:
    inputs:
      hotfix_branch:
        description: 'Hotfix branch to deploy (e.g., hotfix/v1.0.1)'
        required: true
        type: string
      version:
        description: 'Version number (leave empty for auto-increment)'
        required: false
        type: string
      environments:
        description: 'Target environments'
        type: choice
        options:
          - staging2
          - production
          - both
        default: 'staging2'
        required: true
      merge_to_main:
        description: 'Merge hotfix to main after successful deployment'
        type: boolean
        default: true
        required: false

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ (inputs.version != '' && format('v{0}', inputs.version)) || steps.auto_version.outputs.version_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.hotfix_branch }}
          fetch-depth: 0
          
      - name: Auto-determine version
        id: auto_version
        if: inputs.version == ''
        run: |
          # Extract base version from branch name
          if [[ "${{ inputs.hotfix_branch }}" =~ hotfix/v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
            echo "version_tag=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Automatically determined version: $NEW_VERSION"
          else
            echo "::error::Unable to determine version from branch name. Please specify version explicitly."
            exit 1
          fi
      
      - name: Validate manual version format
        if: inputs.version != ''
        run: |
          if ! [[ ${{ inputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format. Must be in format X.Y.Z"
            exit 1
          fi
          echo "Using manual version: v${{ inputs.version }}"
  
  tag-hotfix:
    needs: determine-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version_tag: ${{ needs.determine-version.outputs.version_tag }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.hotfix_branch }}
          fetch-depth: 0
      
      - name: Create and push tag
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.determine-version.outputs.version_tag }}
          name: Hotfix ${{ needs.determine-version.outputs.version_tag }}
          commit: ${{ inputs.hotfix_branch }}
          generateReleaseNotes: true
          makeLatest: true
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: false
          draft: false
          prerelease: true

  deploy-staging2:
    needs: [determine-version, tag-hotfix]
    if: inputs.environments == 'staging2' || inputs.environments == 'both'
    runs-on: ubuntu-latest
    environment: staging2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-version.outputs.version_tag }}
          fetch-depth: 0
          
      - name: Deploy to staging2
        run: |
          echo "SIMULATED: Would deploy ${{ needs.determine-version.outputs.version_tag }} to staging2"
          echo "Version Tag: ${{ needs.determine-version.outputs.version_tag }}"
          # Real deployment steps would go here

  deploy-production:
    needs: [determine-version, tag-hotfix, deploy-staging2]
    if: inputs.environments == 'production' || inputs.environments == 'both'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-version.outputs.version_tag }}
          fetch-depth: 0
          
      - name: Deploy to production
        run: |
          echo "SIMULATED: Would deploy ${{ needs.determine-version.outputs.version_tag }} to production"
          echo "Version Tag: ${{ needs.determine-version.outputs.version_tag }}"
          # Real deployment steps would go here

  merge-to-main:
    needs: [determine-version, tag-hotfix, deploy-staging2, deploy-production]
    if: success() && inputs.merge_to_main
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Merge hotfix to main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          
          # Check out main and update
          git checkout main
          git pull
          
          # Merge hotfix branch with no-ff to preserve history
          git merge --no-ff ${{ inputs.hotfix_branch }} -m "Merge hotfix ${{ needs.determine-version.outputs.version_tag }} to main"
          
          # Push changes
          git push origin main
          
      - name: Notify merge completed
        run: |
          echo "SIMULATED: Would send Slack notification about hotfix merge to main"
          echo "Hotfix: ${{ needs.determine-version.outputs.version_tag }}"